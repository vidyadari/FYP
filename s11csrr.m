function [y1] = s11csrr(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 10-May-2022 00:28:21.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = 2xQ matrix, input #1
% and returns:
%   y = 1xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [1;1];
x1_step1.gain = [0.222222222222222;1];
x1_step1.ymin = -1;

% Layer 1
b1 = [-5.4807000753846075725;-1.7598934139948851918;12.377187681832115373;10.370224971219409227;1.3856620440309184161];
IW1_1 = [-5.1871396442015029749 -2.34335554527209311;-0.62068154883892678875 -1.0776495936338950088;27.490398725696888249 -0.3840141272802679584;22.778891379624212732 -0.26936436689317150295;0.41683263314888580053 -1.5563330821069949472];

% Layer 2
b2 = 0.81807487035640691353;
LW2_1 = [0.10970270300609603897 -0.17491609553012277267 2.888035921452894339 -2.8841836714158031185 -0.03115889592012406617];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.0760862315894921;
y1_step1.xoffset = -26.53191817;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
